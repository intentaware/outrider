---
apiVersion: v1
kind: Service
metadata:
  name: prod-dhist-hs
  labels:
    app: prod-dhist
spec:
  ports:
  - port: 8083
    name: historical
  selector:
    app: prod-dhist
  clusterIP: None
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: prod-dhist-pdb
spec:
  selector:
    matchLabels:
      app: prod-dhist
  maxUnavailable: 1
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: prod-dhist
spec:
  serviceName: prod-dhist-hs
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: prod-dhist
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - prod-dhist
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                        - zk
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 300
      containers:
      - name: prod-dhist
        imagePullPolicy: Always
        image: gcr.io/intentaware-1253/ia-druid-base:0.10.1-0.1
        securityContext:
          runAsUser: 1000
        ports:
        - containerPort: 8083
          name: historical
        command:
        - sh
        - -c
        - "exec java \
          -server \
          -Xmx1g \
          -XX:MaxDirectMemorySize=4116709376 \
          -Duser.timezone=UTC \
          -Dfile.encoding=UTF-8 \
          -Ddruid.zk.service.host=prod-zk-cs.default.svc.cluster.local:2181 \
          -Ddruid.zk.paths.base=/druid/prod \
          -Ddruid.discovery.curator.path=/prod/discovery \
          -Ddruid.extensions.loadList=['\x22'druid-avro-extensions'\x22','\x22'druid-google-extensions'\x22'] \
          -Ddruid.extensions.directory=/usr/local/druid/extensions \
          -Ddruid.extensions.hadoopDependenciesDir=/usr/local/druid/hadoop-dependencies \
          -Ddruid.storage.type=google \
          -Ddruid.google.bucket=ia-production-store \
          -Ddruid.google.prefix=druid/segments \
          -Ddruid.indexer.logs.bucket=ia-production-store \
          -Ddruid.indexer.logs.prefix=druid/indexing-logs \
          -Ddruid.computation.buffer.size=67108864 \
          -Ddruid.segmentCache.locations=[{'\x22'path'\x22':'\x22'/var/druid/segment-cache'\x22','\x22'maxSize'\x22':5000000000}] \
          -Ddruid.server.maxSize=5000000000 \
          -cp /usr/local/druid/lib/* \
          io.druid.cli.Main server historical "
        volumeMounts:
          - name: segment-cache
            mountPath: /var/druid/segment-cache
        readinessProbe:
          exec:
           command:
            - sh
            - -c
            - "exec curl -X GET http://localhost:8083/status "
  volumeClaimTemplates:
  - metadata:
      name: segment-cache
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
